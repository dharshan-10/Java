public class BinarySearchTree {
    public static void main(String[] args) {
        Node root = null;
        BST binary = new BST();
        root = binary.insert(root, 5);
        binary.insert(root, 7);
        binary.insert(root, 1);
        binary.insert(root, 0);
        binary.insert(root, 2);
        binary.insert(root, 4);
        binary.insert(root, 8);
        binary.insert(root, 3);
        binary.insert(root, 6);
        binary.insert(root, 9);
        System.out.println("Inorder Traversal");
        binary.inorder(root);
        System.out.println("\nPreorder Traversal");
        binary.preorder(root);
        System.out.println("\nPostorder Traversal");
        binary.postorder(root);
        binary.delete(root, 7);
        System.out.println("\n\nAfter deleting 7 :\n");
        System.out.println("Inorder Traversal");
        binary.inorder(root);
        System.out.println("\nPreorder Traversal");
        binary.preorder(root);
        System.out.println("\nPostorder Traversal");
        binary.postorder(root);
    }
}

class Node {
    Node left, right;
    int val;

    public Node(int num) {
        val = num;
        left = right = null;
    }
}

class BST {
    public Node insert(Node root, int val) {
        if (root == null)
            root = new Node(val);
        else if (root.val > val) {
            root.left = insert(root.left, val);
        } else {
            root.right = insert(root.right, val);
        }
        return root;
    }

    public void inorder(Node root) {
        if (root != null) {

            inorder(root.left);
            System.out.print(root.val + " ");
            inorder(root.right);
        }
    }

    public static void postorder(Node root) {
        if (root != null) {
            postorder(root.left);
            postorder(root.right);
            System.out.print(root.val + " ");
        }
    }

    public static void preorder(Node root) {
        if (root != null) {
            System.out.print(root.val + " ");
            preorder(root.left);
            preorder(root.right);
        }
    }

    public static Node delete(Node root, int val) {
        if (root == null)
            return root;
        if (root.val < val) {
            root.right = delete(root.right, val);
        } else if (root.val > val) {
            root.left = delete(root.left, val);
        } else {
            if (root.right == null)
                return root.left;
            else if (root.left == null)
                return root.right;
            else {
                int min = minimum(root.right);
                root.val = min;
                root.right = delete(root.right, min);
            }
        }
        return root;

    }

    public static int minimum(Node root) {
        while (root.left != null) {

            root = root.left;
        }
        return root.val;

    }

}
