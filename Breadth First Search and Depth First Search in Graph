import java.util.ArrayList;
import java.util.LinkedList;
import java.util.Queue;

public class graphRepresentation {
    ArrayList<ArrayList<Integer>> list = new ArrayList<>();

    public static void main(String[] args) {
        graphRepresentation graph = new graphRepresentation(5);
        graph.add(0, 1);
        graph.add(2, 3);
        graph.add(3, 4);
        graph.add(0, 4);
        graph.add(1, 2);
        graph.add(4, 1);
        graph.show();
        graph.bfs(0);
        graph.dfs(0);
    }

    graphRepresentation(int n) {
        for (int i = 0; i < n; i++) {
            list.add(new ArrayList<Integer>());
        }
    }

    public void add(int a, int b) {
        list.get(a).add(b);
        list.get(b).add(a);
    }

    public void show() {
        for (int i = 0; i < list.size(); i++) {
            System.out.println("Element at Index " + i);
            for (int j = 0; j < list.get(i).size(); j++) {
                System.out.println(list.get(i).get(j));
            }
        }
    }

    public void bfs(int vertex) {
        int v = list.size();
        Queue<Integer> q = new LinkedList<>();

        System.out.println("Breadth First Search");
        boolean[] arr = new boolean[v];
        arr[vertex] = true;
        q.add(vertex);
        while (q.size() != 0) {
            int node = q.remove();
            System.out.println(node);
            for (int i = 0; i < list.get(node).size(); i++) {
                int temp = list.get(node).get(i);
                if (!arr[temp]) {
                    arr[temp] = true;
                    q.add(temp);
                }
            }
        }

    }

    private void dfs(int i) {
        boolean[] result = new boolean[list.size()];
        System.out.println("Depth First Search");
        dfs2(i, result);
    }

    public void dfs2(int n, boolean[] arr) {
        System.out.println(n);
        arr[n] = true;
        for (int i = 0; i < list.get(n).size(); i++) {
            int node = list.get(n).get(i);
            if (!arr[node]) {
                dfs2(node, arr);
            }
        }
    }
}
